---

- set_fact:
    systemd_network_dir: /etc/systemd/network

- name: set net.ipv4.conf.all.arp_filter to 1
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_filter
    value: '1'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: set net.ipv4.conf.all.arp_ignore to 1
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_ignore
    value: '1'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: set net.ipv4.conf.all.arp_announce to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_announce
    value: '2'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: set net.ipv4.conf.all.rp_filter to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.rp_filter
    value: '2'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: create {{ oai.docker.network.name }} network
  community.docker.docker_network:
    name: "{{ oai.docker.network.name }}"
    driver: bridge
    ipam_config:
      - subnet: "{{ oai.docker.network.subnet }}"
    state: present
    driver_options:
      com.docker.network.bridge.name: "{{ oai.docker.network.bridge.name }}"
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: "add iptable rule: forward from {{ oai.docker.network.data_iface }} to {{ oai.docker.network.bridge.name }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ oai.docker.network.data_iface }}"
    out_interface: "{{ oai.docker.network.bridge.name }}"
    jump: ACCEPT
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: "add iptable rule: forward from {{ oai.docker.network.bridge.name }} to {{ oai.docker.network.data_iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ oai.docker.network.bridge.name }}"
    out_interface: "{{ oai.docker.network.data_iface }}"
    jump: ACCEPT
  when: inventory_hostname in groups['oai_nodes'][0]
  become: true

- name: "add iptable rule: forward from {{ oai.docker.network.bridge.name }} to {{ core.upf.iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ oai.docker.network.bridge.name }}"
    out_interface: "{{ core.upf.iface }}"
    jump: ACCEPT
  when: (inventory_hostname in groups['oai_nodes'][0]) and (inventory_hostname in groups['master_nodes'])
  become: true

- name: "add iptable rule: forward from {{ oai.docker.network.bridge.name }} to {{ core.upf.iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ core.upf.iface }}"
    out_interface: "{{ oai.docker.network.bridge.name }}"
    jump: ACCEPT
  when: (inventory_hostname in groups['oai_nodes'][0]) and (inventory_hostname in groups['master_nodes'])
  become: true

# TODO: use ansible's net_static_route module
- name: configure static route for upf traffic on oai node
  shell: |
    ip route add {{ core.upf.ip_prefix }} via {{ core.amf.ip }}
  when: (inventory_hostname in groups['oai_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true
  ignore_errors: yes

# TODO: use ansible's net_static_route module
- name: configure static route for oai traffic on aether node
  shell: |
    ip route add {{ oai.docker.network.subnet }} via {{  hostvars[item]['ansible_default_ipv4']['address'] }}
  with_items: "{{ play_hosts | intersect(groups['oai_nodes'][0]) | difference(groups['master_nodes']) }}"
  when: (inventory_hostname in groups['master_nodes'])
  become: true
  ignore_errors: yes
